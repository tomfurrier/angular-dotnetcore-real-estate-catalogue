---
swagger: "2.0"
info:
  description: Search through properties.
  version: 1.0.0
  title: Real Estate Catalogue
  contact:
    email: hello@tomfurrier.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /tomfurrier/real-estate-catalogue/1.0.0
tags:
- name: realestates
  description: Operations about real estates
- name: users
  description: Operations about users
schemes:
- https
security:
- firebase:
  - https://www.googleapis.com/auth/firebase
paths:
  /users:
    get:
      tags:
      - users
      summary: Finds users filtered by optional parameters
      operationId: findUsers
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: Successfull operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        405:
          description: Invalid input
    post:
      tags:
      - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
      - users
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
      - users
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{userId}:
    get:
      tags:
      - users
      summary: Get user by id
      operationId: getUserById
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - users
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: id of user that need to be updated
        required: true
        type: integer
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: userId
        in: path
        description: The userId that needs to be deleted
        required: true
        type: integer
      responses:
        400:
          description: Invalid userId supplied
        404:
          description: User not found
  /realestates:
    get:
      tags:
      - realestates
      summary: Finds real estates filtered by optional parameters
      operationId: findRealEstates
      produces:
      - application/json
      parameters:
      - name: type
        in: query
        description: Type of real estates to find
        required: false
        type: string
      - name: address
        in: query
        description: Where to find real estates
        required: false
        type: string
      - name: intent
        in: query
        description: For rent or to buy
        required: false
        type: string
        enum:
        - rent
        - buy
      - name: minPrice
        in: query
        description: Minimum price for real estate
        required: false
        type: number
      - name: maxPrice
        in: query
        description: Maximum price for real estate
        required: false
        type: number
      - name: minFloorArea
        in: query
        description: Minimum floor area for real estate
        required: false
        type: number
      - name: maxFloorArea
        in: query
        description: Maximum floor area for real estate
        required: false
        type: number
      - name: minRoomCount
        in: query
        description: Minimum room count for real estate
        required: false
        type: integer
      - name: maxRoomCount
        in: query
        description: Maximum room count for real estate
        required: false
        type: integer
      - name: maxAge
        in: query
        description: Maximum age of real estate. 0 means newly built.
        required: false
        type: integer
      - name: tags
        in: query
        description: Other search tags to filter by
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        200:
          description: Successfull operation
          schema:
            type: array
            items:
              $ref: '#/definitions/RealEstate'
        405:
          description: Invalid input
    post:
      tags:
      - realestates
      summary: Add a new real estate to the catalogue
      operationId: addRealEstate
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Property object that needs to be added to the catalogue
        required: true
        schema:
          $ref: '#/definitions/RealEstate'
      responses:
        200:
          description: Successful operation
        405:
          description: Invalid input
    put:
      tags:
      - realestates
      summary: Update an existing real estate
      operationId: updateRealEstate
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Real Estate object that needs to be updated the catalogue
        required: true
        schema:
          $ref: '#/definitions/RealEstate'
      responses:
        400:
          description: Invalid id supplied
        404:
          description: Real estate not found
        405:
          description: Validation exception
  /realestates/{realestateId}:
    get:
      tags:
      - realestates
      summary: Find the real estate by id
      description: Returns a single real estate
      operationId: getRealEstateById
      produces:
      - application/json
      parameters:
      - name: realestateId
        in: path
        description: id of real estate to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/RealEstate'
        400:
          description: Invalid id supplied
        404:
          description: Property not found
    delete:
      tags:
      - realestates
      summary: Deletes a real estate
      operationId: deleteRealEstate
      produces:
      - application/json
      parameters:
      - name: realestateId
        in: path
        description: Real estate id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid id supplied
        404:
          description: Real estate not found
  /realestates/{realestateId}/uploadImage:
    post:
      tags:
      - realestates
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: realestateId
        in: path
        description: Id of real estate to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
securityDefinitions:
  firebase:
    type: oauth2
    authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
    flow: implicit
    scopes:
      https://www.googleapis.com/auth/firebase: Firebase scope
    x-google-issuer: https://securetoken.google.com/real-estate-catalogue
    x-google-jwks_uri: https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com
    x-google-audiences: real-estate-catalogue
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    example:
      firstName: firstName
      lastName: lastName
      password: password
      userStatus: 6
      phone: phone
      id: 0
      email: email
      username: username
  RealEstate:
    type: object
    required:
    - address
    - floorArea
    - photoUrls
    - price
    - roomCount
    - title
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string
        description: Real estate type
        enum:
        - flat
        - house
        - rentedRoom
        - office
        - garage
        - site
        - summerHouse
        - agriculturalArea
        - soil
      intent:
        type: string
        description: For rent or buy
        enum:
        - rent
        - buy
      title:
        type: string
        example: House for sale
      price:
        type: integer
        example: 18000000 HUF
      address:
        type: string
        example: XII. district, Kakukk street
      floorArea:
        type: number
        example: 123 sqm
      lotSize:
        type: number
        example: 560 sqm
      roomCount:
        type: string
        example: 2+1 half room
      photoUrls:
        type: array
        items:
          type: string
      constructionDate:
        type: string
        format: date
        example: May 2011
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      sellingStatus:
        type: string
        description: Real estate selling status in the catalogue
        enum:
        - available
        - sold
    example:
      roomCount: 2+1 half room
      address: XII. district, Kakukk street
      photoUrls:
      - photoUrls
      - photoUrls
      lotSize: 560 sqm
      type: flat
      title: House for sale
      intent: rent
      tags:
      - name: name
        id: 6
      - name: name
        id: 6
      sellingStatus: available
      price: 18000000 HUF
      id: 0
      constructionDate: May 2011
      floorArea: 123 sqm
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    example:
      name: name
      id: 6
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
    example:
      code: 0
      type: type
      message: message
